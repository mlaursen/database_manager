CREATE OR REPLACE PACKAGE BODY TEST_ACCOUNT_SETTING_PKG AS
  FUNCTION LATEST(PACCTID IN TEST_ACCOUNT_SETTING.ACCOUNTID%TYPE) RETURN DATE
  IS
    ILATEST DATE;
  BEGIN
    SELECT MAX(DATE_CHANGED) INTO ILATEST
    FROM TEST_ACCOUNT_SETTING
    WHERE ACCOUNTID=PACCTID
    GROUP BY ACCOUNTID;
    RETURN ILATEST;
  END LATEST;
  
  
  PROCEDURE NEW( PACCTID IN TEST_ACCOUNT_SETTING.ACCOUNTID%TYPE
               , PWEEKDAY IN TEST_ACCOUNT_SETTING.WEEKDAY%TYPE
               , PMULT IN TEST_ACCOUNT_SETTING.MULTIPLIER%TYPE
               , PHEIGHT IN TEST_ACCOUNT_SETTING.HEIGHT%TYPE
               )
  IS
    ICHANGED DATE;
    IWEEKDAY WEEKDAY.NAME%TYPE;
    IMULTIPLIER MULTIPLIER.NAME%TYPE;
  BEGIN
    IWEEKDAY := UPPER(PWEEKDAY);
    IMULTIPLIER:= UPPER(PMULT);
    ICHANGED := LATEST(PACCTID);
    IF ROUND(ICHANGED, 'DDD') = ROUND(SYSDATE, 'DDD') OR ICHANGED=NULL THEN
      UPDATE TEST_ACCOUNT_SETTING
      SET WEEKDAY=IWEEKDAY,
          MULTIPLIER=IMULTIPLIER,
          HEIGHT=PHEIGHT
      WHERE ACCOUNTID=PACCTID AND DATE_CHANGED=ICHANGED;
    ELSE
      INSERT INTO TEST_ACCOUNT_SETTING(ID, ACCOUNTID, WEEKDAY, MULTIPLIER, HEIGHT, DATE_CHANGED)
      VALUES(SEQ_TEST_ACCOUNT_SETTING_ID.NEXTVAL, PACCTID, IWEEKDAY, IMULTIPLIER, PHEIGHT, SYSDATE);
    END IF;
    COMMIT;
    
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        INSERT INTO TEST_ACCOUNT_SETTING(ID, ACCOUNTID)
        VALUES(SEQ_TEST_ACCOUNT_SETTING_ID.NEXTVAL, PACCTID);
        COMMIT;
      WHEN OTHERS THEN
        ROLLBACK;
        RAISE;
  END NEW;
  
  PROCEDURE GET(PID IN TEST_ACCOUNT_SETTING.ACCOUNTID%TYPE, PCURSOR OUT SYS_REFCURSOR)
  IS
  BEGIN
    OPEN PCURSOR FOR
      SELECT *
      FROM TEST_ACCOUNT_SETTING
      WHERE ACCOUNTID=PID AND DATE_CHANGED=LATEST(ACCOUNTID);
  END GET;
  
  PROCEDURE GET(PCURSOR OUT SYS_REFCURSOR)
  IS
  BEGIN
    OPEN PCURSOR FOR
      SELECT *
      FROM TEST_ACCOUNT_SETTING
      WHERE DATE_CHANGED=LATEST(ACCOUNTID)
      GROUP BY ACCOUNTID;
  END GET;
  
END TEST_ACCOUNT_SETTING_PKG;