DROP TABLE TEST_TABLE;
CREATE TABLE TEST_TABLE
(ID INTEGER, NAME VARCHAR2(20), ORANGE CLOB);
DROP SEQUENCE SEQ;
CREATE SEQUENCE SEQ;
CREATE OR REPLACE PACKAGE TEST_TABLE_PKG AS
  PROCEDURE GET(PID IN INTEGER, PCURSOR OUT SYS_REFCURSOR);
  PROCEDURE GET(PNAME IN TEST_TABLE.NAME%TYPE, PCURSOR OUT SYS_REFCURSOR);
  PROCEDURE GET(PCURSOR OUT SYS_REFCURSOR);
  PROCEDURE NEW(PNAME IN TEST_TABLE.NAME%TYPE, PORANGE IN TEST_TABLE.ORANGE%TYPE, PID IN INTEGER DEFAULT SEQ.NEXTVAL);
  PROCEDURE FILTER(PNAME IN TEST_TABLE.NAME%TYPE, PCURSOR OUT SYS_REFCURSOR);
  PROCEDURE UPDATETESTTABLE(PID IN INTEGER, PNAME IN TEST_TABLE.NAME%TYPE);
  PROCEDURE DELETE(PID IN INTEGER);
  PROCEDURE DELETEALL(PNAME IN TEST_TABLE.NAME%TYPE);
END TEST_TABLE_PKG;
/


CREATE OR REPLACE PACKAGE BODY TEST_TABLE_PKG AS
  PROCEDURE NEW(PNAME IN TEST_TABLE.NAME%TYPE, PORANGE IN TEST_TABLE.ORANGE%TYPE, PID IN INTEGER DEFAULT SEQ.NEXTVAL)
  IS
  BEGIN
    INSERT INTO TEST_TABLE(ID,NAME,ORANGE)
    VALUES(PID,UPPER(PNAME),PORANGE);
    COMMIT;
    
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        RAISE;
  END NEW;
  PROCEDURE GET(PNAME IN TEST_TABLE.NAME%TYPE, PCURSOR OUT SYS_REFCURSOR)
  IS
  BEGIN
    OPEN PCURSOR FOR
      SELECT * FROM TEST_TABLE WHERE UPPER(NAME)=UPPER(PNAME);
  END GET;
  
  PROCEDURE GET(PID IN INTEGER, PCURSOR OUT SYS_REFCURSOR)
  IS
  BEGIN
    OPEN PCURSOR FOR
      SELECT *
      FROM TEST_TABLE
      WHERE ID=PID;
  END GET;
  
  PROCEDURE GET(PCURSOR OUT SYS_REFCURSOR)
  IS
  BEGIN
    OPEN PCURSOR FOR
      SELECT *
      FROM TEST_TABLE
      ORDER BY ID;
  END GET;
  
  PROCEDURE FILTER(PNAME IN TEST_TABLE.NAME%TYPE, PCURSOR OUT SYS_REFCURSOR)
  IS
  BEGIN
    OPEN PCURSOR FOR
      SELECT *
      FROM TEST_TABLE
      WHERE UPPER(NAME)=UPPER(PNAME);
  END FILTER;
  
  PROCEDURE UPDATETESTTABLE(PID IN INTEGER, PNAME IN TEST_TABLE.NAME%TYPE)
  IS
  BEGIN
    UPDATE TEST_TABLE
    SET NAME=PNAME
    WHERE ID=PID;
    COMMIT;
    
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        RAISE;
  END UPDATETESTTABLE;
  
  PROCEDURE DELETE(PID IN INTEGER)
  IS
  BEGIN
    DELETE FROM TEST_TABLE WHERE ID=PID;
    COMMIT;
    
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        RAISE;
  END DELETE;
  
  PROCEDURE DELETEALL(PNAME IN TEST_TABLE.NAME%TYPE)
  IS
  BEGIN
    DELETE FROM TEST_TABLE
    WHERE UPPER(NAME)=UPPER(PNAME);
    COMMIT;
    
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        RAISE;
  END DELETEALL;
END TEST_TABLE_PKG;
/

select * from test_table;
DELETE FROM TEST_TABLE;
commit;