
CREATE TABLE JOB_TYPE
( NAME VARCHAR2(128)
, CONSTRAINT PK_JOB_TYPE_NAME PRIMARY KEY(NAME)
);

CREATE TABLE JOB
( ID INTEGER
, JOB_TYPE VARCHAR2(128)
, NAME VARCHAR2(128)
, DESCRIPTION VARCHAR2(128)
, CONSTRAINT PK_JOB_ID PRIMARY KEY(ID)
, CONSTRAINT FK_JOB_TYPE FOREIGN KEY (JOB_TYPE) REFERENCES JOB_TYPE(NAME)
);

CREATE TABLE PERSON
( ID INTEGER
, JOB_ID INTEGER
, FIRST_NAME VARCHAR2(128)
, LAST_NAME VARCHAR2(128)
, SALARY DECIMAL(12,2)
, CONSTRAINT PK_PERSON_ID PRIMARY KEY(ID)
, CONSTRAINT FK_JOB_ID FOREIGN KEY (JOB_ID) REFERENCES JOB(ID)
);

INSERT INTO JOB_TYPE VALUES('IT');
INSERT INTO JOB_TYPE VALUES('FINANCE');
INSERT INTO JOB_TYPE VALUES('CONSULTING');
INSERT INTO JOB_TYPE VALUES('BUSINESS');
INSERT INTO JOB_TYPE VALUES('AUTO');
INSERT INTO JOB_TYPE VALUES('GOVERNMENT');
INSERT INTO JOB_TYPE VALUES('UNEMPLOYED');
INSERT INTO JOB_TYPE VALUES('SUPER SECRET');
INSERT INTO JOB_TYPE VALUES('HUMAN RESOURCES');
INSERT INTO JOB_TYPE VALUES('SECRETARY');
INSERT INTO JOB_TYPE VALUES('OTHER');

INSERT INTO JOB(ID, JOB_TYPE, NAME, DESCRIPTION)
VALUES(0,'UNEMPLOYED','UNEMPLOYED','Got no job. They took ''er jobs.');
INSERT INTO JOB(ID, JOB_TYPE, NAME, DESCRIPTION)
VALUES(1,'IT','ENTRY LEVEL JAVA DEVELOPER', 'Manage java programs that do stuff');
INSERT INTO JOB(ID, JOB_TYPE, NAME, DESCRIPTION)
VALUES(2,'AUTO','MECHANIC', 'Do mechanic stuff.');
INSERT INTO JOB(ID, JOB_TYPE, NAME, DESCRIPTION)
VALUES(3,'GOVERNMENT','SENIOR SECURITY LEAD','Redacted');
INSERT INTO JOB(ID, JOB_TYPE, NAME, DESCRIPTION)
VALUES(4,'BUSINESS','ENTRY LEVEL BUSINESS POSITION','IDK');
INSERT INTO JOB(ID, JOB_TYPE, NAME, DESCRIPTION)
VALUES(5,'FINANCE','ENTRY LEVEL SALES','Do sales stuff');
INSERT INTO JOB(ID, JOB_TYPE, NAME, DESCRIPTION)
VALUES(6,'IT','SENIOR WEB DEVELOPER','Requres xx with y+3 amount of years even though it has only been out for y years');
INSERT INTO JOB(ID, JOB_TYPE, NAME, DESCRIPTION)
VALUES(7,'CONSULTING','SENIOR PYTHON DEVELOPER','Requres xx with y+3 amount of years even though it has only been out for y years');
INSERT INTO JOB(ID, JOB_TYPE, NAME, DESCRIPTION)
VALUES(8,'SUPER SECRET','ISIS SPY','Do spy things. Spy-ly.');
INSERT INTO JOB(ID, JOB_TYPE, NAME, DESCRIPTION)
VALUES(9,'HUMAN RESOURCES','LEAD HUMAN RESOURCES','Make sure spys are in good working conditions and stuff. Use stuff animals for help.');
INSERT INTO JOB(ID, JOB_TYPE, NAME, DESCRIPTION)
VALUES(10,'HUMAN RESOURCES','HUMAN RESOURCE PERSON','Do human resource stuff');
INSERT INTO JOB(ID,JOB_TYPE,NAME,DESCRIPTION)
VALUES(11,'SUPER SECRET','LAB GUY','Who knows. Man. Science stuff?');
INSERT INTO JOB(ID,JOB_TYPE,NAME,DESCRIPTION)
VALUES(12,'SECRETARY','ISIS SECRETARY','Answer phone calls. Huff rubber glue.. other weird things.');

INSERT INTO PERSON(ID, JOB_ID, FIRST_NAME, LAST_NAME, SALARY)
VALUES(0, 8, 'STIRLING', 'ARCHER',1921903);
INSERT INTO PERSON(ID, JOB_ID, FIRST_NAME, LAST_NAME, SALARY)
VALUES(1, 8, 'LANA', 'KANE', 3834201);
INSERT INTO PERSON(ID, JOB_ID, FIRST_NAME, LAST_NAME, SALARY)
VALUES(2,9,'PAM','POOVEY',38900);
INSERT INTO PERSON(ID, JOB_ID, FIRST_NAME, LAST_NAME, SALARY)
VALUES(3,0,'BLOB','MARLEY',0);
INSERT INTO PERSON(ID, JOB_ID, FIRST_NAME, LAST_NAME, SALARY)
VALUES(4,1,'I.P.','FREELY',45000);
INSERT INTO PERSON(ID, JOB_ID, FIRST_NAME, LAST_NAME, SALARY)
VALUES(5,6,'GREGORY','MCGREGGORS',95000);
INSERT INTO PERSON(ID, JOB_ID, FIRST_NAME, LAST_NAME, SALARY)
VALUES(6,7,'VANESSA','CONTESSA',98000);
INSERT INTO PERSON(ID, JOB_ID, FIRST_NAME, LAST_NAME, SALARY)
VALUES(7,5,'JEFF','DERICKS',38400);
INSERT INTO PERSON(ID, JOB_ID, FIRST_NAME, LAST_NAME, SALARY)
VALUES(8,2,'MATT','DUNNLEY',80000);
INSERT INTO PERSON(ID, JOB_ID, FIRST_NAME, LAST_NAME, SALARY)
VALUES(9,4,'DERRICK','HODGES',34222);
INSERT INTO PERSON(ID, JOB_ID, FIRST_NAME, LAST_NAME, SALARY)
VALUES(10,3,'ASHLEY','BJORK',239200);
INSERT INTO PERSON(ID, JOB_ID, FIRST_NAME, LAST_NAME, SALARY)
VALUES(11,12,'CHERYL','TUNT',39000);
INSERT INTO PERSON(ID,JOB_ID,FIRST_NAME,LAST_NAME,SALARY)
VALUES(12,11,'DOCTOR','KRIEGER',89344);
COMMIT;

CREATE SEQUENCE SEQ_JOB_ID
START WITH 13
MINVALUE 0
INCREMENT BY 1
CACHE 20
NOCYCLE;

CREATE SEQUENCE SEQ_PERSON_ID
START WITH 13
MINVALUE 0
INCREMENT BY 1
CACHE 20
NOCYCLE;

CREATE OR REPLACE PACKAGE JOB_TYPE_PKG AS
  -- Get all the Job Types as a sys_refcursor
  PROCEDURE GET(PCURSOR OUT SYS_REFCURSOR);
  
  -- Create a new JobType
  PROCEDURE NEW(PNAME IN JOB_TYPE.NAME%TYPE);
END JOB_TYPE_PKG;
/

CREATE OR REPLACE PACKAGE BODY JOB_TYPE_PKG AS
  PROCEDURE GET(PCURSOR OUT SYS_REFCURSOR)
  IS
  BEGIN
    OPEN PCURSOR FOR
      SELECT NAME FROM JOB_TYPE;
  END GET;
  
  PROCEDURE NEW(PNAME IN JOB_TYPE.NAME%TYPE)
  IS
  BEGIN
    INSERT INTO JOB_TYPE VALUES(PNAME);
    COMMIT;
    
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        RAISE;
  END NEW;

END JOB_TYPE_PKG;
/

CREATE OR REPLACE PACKAGE JOB_PKG AS
  -- Get a job by id
  PROCEDURE GET(PID IN INTEGER, PCURSOR OUT SYS_REFCURSOR);
  
  -- Get a job by name
  PROCEDURE GET(PNAME IN JOB.NAME%TYPE, PCURSOR OUT SYS_REFCURSOR);
  
  -- Get all the jobs
  PROCEDURE GET(PCURSOR OUT SYS_REFCURSOR);
  
  -- Create a new job
  PROCEDURE NEW(PJOB_TYPE IN JOB.JOB_TYPE%TYPE, PNAME IN JOB.NAME%TYPE, PDESC IN JOB.DESCRIPTION%TYPE, PID IN JOB.ID%TYPE DEFAULT SEQ_JOB_ID.NEXTVAL);
  
  -- Update a job by id
  PROCEDURE UPDATEJOB(PID IN JOB.ID%TYPE, PJOB_TYPE IN JOB.JOB_TYPE%TYPE, PNAME IN JOB.NAME%TYPE, PDESC IN JOB.DESCRIPTION%TYPE);
  
  -- Deletes a job by id
  PROCEDURE DELETE(PID IN JOB.ID%TYPE);
  
END JOB_PKG;
/

CREATE OR REPLACE PACKAGE BODY JOB_PKG AS
  PROCEDURE GET(PID IN INTEGER, PCURSOR OUT SYS_REFCURSOR)
  IS
  BEGIN
    OPEN PCURSOR FOR
      SELECT *
      FROM JOB
      WHERE ID=PID;
  END GET;
  
  PROCEDURE GET(PNAME IN JOB.NAME%TYPE, PCURSOR OUT SYS_REFCURSOR)
  IS
  BEGIN
    OPEN PCURSOR FOR
      SELECT *
      FROM JOB
      WHERE NAME=UPPER(PNAME);
  END GET;
  
  PROCEDURE GET(PCURSOR OUT SYS_REFCURSOR)
  IS
  BEGIN
    OPEN PCURSOR FOR
      SELECT *
      FROM JOB;
  END GET;
  
  PROCEDURE NEW(PJOB_TYPE IN JOB.JOB_TYPE%TYPE, PNAME IN JOB.NAME%TYPE, PDESC IN JOB.DESCRIPTION%TYPE, PID IN JOB.ID%TYPE DEFAULT SEQ_JOB_ID.NEXTVAL)
  IS
  BEGIN
    INSERT INTO JOB(ID, JOB_TYPE, NAME, DESCRIPTION)
    VALUES(PID,UPPER(PJOB_TYPE),UPPER(PNAME),PDESC);
    COMMIT;
    
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        RAISE;
  END NEW;
  
  PROCEDURE UPDATEJOB(PID IN JOB.ID%TYPE, PJOB_TYPE IN JOB.JOB_TYPE%TYPE, PNAME IN JOB.NAME%TYPE, PDESC IN JOB.DESCRIPTION%TYPE)
  IS
  BEGIN
    UPDATE JOB
    SET JOB_TYPE=UPPER(PJOB_TYPE)
      , NAME=UPPER(PNAME)
      , DESCRIPTION=UPPER(PDESC)
    WHERE ID=PID;
    COMMIT;
    
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        RAISE;
  END UPDATEJOB;
  
  PROCEDURE DELETE(PID IN JOB.ID%TYPE)
  IS
  BEGIN
    DELETE FROM JOB WHERE ID=PID;
    COMMIT;
    
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        RAISE;
  END DELETE;
END JOB_PKG;
/

-------------------------------------------------------------------------------
-- Person Package

CREATE OR REPLACE PACKAGE PERSON_PKG AS
  -- Gets a person by id
  PROCEDURE GET(PID IN PERSON.ID%TYPE, PCURSOR OUT SYS_REFCURSOR);
  
  -- Gets a person by first name and last name. The first name or last name can be null
  PROCEDURE GET(PFIRST IN PERSON.FIRST_NAME%TYPE, PLAST IN PERSON.LAST_NAME%TYPE, PCURSOR OUT SYS_REFCURSOR);
  
  -- Update a person
  PROCEDURE UPDATEPERSON(PID IN INTEGER, PFIRST IN PERSON.FIRST_NAME%TYPE, PLAST IN PERSON.LAST_NAME%TYPE, PJOB_ID IN INTEGER, PSAL IN DECIMAL);

  -- Creates a new person
  PROCEDURE NEW( PJOB_ID IN INTEGER
               , PFIRST IN PERSON.FIRST_NAME%TYPE
               , PLAST IN PERSON.LAST_NAME%TYPE
               , PSAL IN PERSON.SALARY%TYPE
               , PID IN INTEGER DEFAULT SEQ_PERSON_ID.NEXTVAL);
  -- Deletes a person
  PROCEDURE DELETE(PID IN INTEGER);
  
END PERSON_PKG;
/

CREATE OR REPLACE PACKAGE BODY PERSON_PKG AS
  -- Gets a person by id
  PROCEDURE GET(PID IN PERSON.ID%TYPE, PCURSOR OUT SYS_REFCURSOR)
  IS
  BEGIN
    OPEN PCURSOR FOR
      SELECT *
      FROM PERSON
      WHERE ID=PID;
  END GET;
  
  -- Gets a person by first name and last name. The first name or last name can be null
  PROCEDURE GET(PFIRST IN PERSON.FIRST_NAME%TYPE, PLAST IN PERSON.LAST_NAME%TYPE, PCURSOR OUT SYS_REFCURSOR)
  IS
  BEGIN
    IF PFIRST!=NULL AND PLAST!=NULL THEN
      OPEN PCURSOR FOR
        SELECT * FROM PERSON WHERE FIRST_NAME=PFIRST AND LAST_NAME=PLAST;
    ELSE
      OPEN PCURSOR FOR
        SELECT * FROM PERSON WHERE LAST_NAME=PLAST OR FIRST_NAME=PFIRST;
    END IF;
  END GET;
  
  -- Update a person
  PROCEDURE UPDATEPERSON(PID IN INTEGER, PFIRST IN PERSON.FIRST_NAME%TYPE, PLAST IN PERSON.LAST_NAME%TYPE, PJOB_ID IN INTEGER, PSAL IN DECIMAL)
  IS
  BEGIN
    UPDATE PERSON
    SET FIRST_NAME=UPPER(PFIRST)
      , LAST_NAME=UPPER(PLAST)
      , JOB_ID=PJOB_ID
      , SALARY=PSAL
    WHERE ID=PID;
    COMMIT;
    
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        RAISE;
  END UPDATEPERSON;
  
  -- Creates a new person
  PROCEDURE NEW( PJOB_ID IN INTEGER
               , PFIRST IN PERSON.FIRST_NAME%TYPE
               , PLAST IN PERSON.LAST_NAME%TYPE
               , PSAL IN PERSON.SALARY%TYPE
               , PID IN INTEGER DEFAULT SEQ_PERSON_ID.NEXTVAL)
  IS
  BEGIN
    INSERT INTO PERSON(ID, JOB_ID, FIRST_NAME, LAST_NAME, SALARY)
    VALUES(PID, PJOB_ID, UPPER(PFIRST), UPPER(PLAST), PSAL);
    COMMIT;
    
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        RAISE;
  END NEW;
  
  -- Deletes a person
  PROCEDURE DELETE(PID IN INTEGER)
  IS
  BEGIN
    DELETE FROM JOB WHERE ID=PID;
    COMMIT;
    
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        RAISE;
  END DELETE;
  
END PERSON_PKG;
/

